;buildInfoPackage: chisel3, version: 3.3.0-RC3, scalaVersion: 2.12.11, sbtVersion: 1.3.8
circuit StageID : 
  module Registers : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip rd : UInt<5>, dataRs1 : UInt<32>, dataRs2 : UInt<32>, flip dataRd : UInt<32>, flip wren : UInt<1>}
    
    cmem regFile : UInt<32>[32] @[Registers.scala 20:20]
    io.dataRs1 <= UInt<1>("h00") @[Registers.scala 22:14]
    io.dataRs2 <= UInt<1>("h00") @[Registers.scala 23:14]
    node _T = neq(io.rs1, UInt<1>("h00")) @[Registers.scala 24:16]
    when _T : @[Registers.scala 24:25]
      infer mport _T_1 = regFile[io.rs1], clock @[Registers.scala 25:26]
      io.dataRs1 <= _T_1 @[Registers.scala 25:16]
      skip @[Registers.scala 24:25]
    node _T_2 = neq(io.rs2, UInt<1>("h00")) @[Registers.scala 27:16]
    when _T_2 : @[Registers.scala 27:25]
      infer mport _T_3 = regFile[io.rs2], clock @[Registers.scala 28:26]
      io.dataRs2 <= _T_3 @[Registers.scala 28:16]
      skip @[Registers.scala 27:25]
    node _T_4 = neq(io.rd, UInt<1>("h00")) @[Registers.scala 31:26]
    node _T_5 = and(io.wren, _T_4) @[Registers.scala 31:17]
    when _T_5 : @[Registers.scala 31:35]
      infer mport _T_6 = regFile[io.rd], clock @[Registers.scala 32:12]
      _T_6 <= io.dataRd @[Registers.scala 32:20]
      skip @[Registers.scala 31:35]
    
  module StageID : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip lastPipe : {pc : UInt<32>, instr : UInt<32>}, ctrl : {instr : UInt<32>, flip decode : {pcSrc : UInt<4>, aluSrc : UInt<4>, aluOp : UInt<4>, regWr : UInt<1>, memWr : UInt<1>, memRd : UInt<1>, regSrc : UInt<4>, brSrc : UInt<4>}, flip forward : {flip instr : UInt<32>, flip rs1Data : UInt<32>, flip rs2Data : UInt<32>, aluOp1 : UInt<32>, aluOp2 : UInt<32>}}, misc : {flip wbAddr : UInt<32>, flip wbData : UInt<32>, flip wbEn : UInt<1>, pcJump : UInt<32>, flip stall : UInt<1>, flip flush : UInt<1>}, pipe : {pc : UInt<32>, instr : UInt<32>, aluOp1 : UInt<32>, aluOp2 : UInt<32>}, pipeCtrl : {pcSrc : UInt<4>, aluSrc : UInt<4>, aluOp : UInt<4>, regWr : UInt<1>, memWr : UInt<1>, memRd : UInt<1>, regSrc : UInt<4>, brSrc : UInt<4>}}
    
    io.pipeCtrl.brSrc is invalid @[StageID.scala 37:6]
    io.pipeCtrl.regSrc is invalid @[StageID.scala 37:6]
    io.pipeCtrl.memRd is invalid @[StageID.scala 37:6]
    io.pipeCtrl.memWr is invalid @[StageID.scala 37:6]
    io.pipeCtrl.regWr is invalid @[StageID.scala 37:6]
    io.pipeCtrl.aluOp is invalid @[StageID.scala 37:6]
    io.pipeCtrl.aluSrc is invalid @[StageID.scala 37:6]
    io.pipeCtrl.pcSrc is invalid @[StageID.scala 37:6]
    io.pipe.aluOp2 is invalid @[StageID.scala 37:6]
    io.pipe.aluOp1 is invalid @[StageID.scala 37:6]
    io.pipe.instr is invalid @[StageID.scala 37:6]
    io.pipe.pc is invalid @[StageID.scala 37:6]
    io.misc.flush is invalid @[StageID.scala 37:6]
    io.misc.stall is invalid @[StageID.scala 37:6]
    io.misc.pcJump is invalid @[StageID.scala 37:6]
    io.misc.wbEn is invalid @[StageID.scala 37:6]
    io.misc.wbData is invalid @[StageID.scala 37:6]
    io.misc.wbAddr is invalid @[StageID.scala 37:6]
    io.ctrl.forward.aluOp2 is invalid @[StageID.scala 37:6]
    io.ctrl.forward.aluOp1 is invalid @[StageID.scala 37:6]
    io.ctrl.forward.rs2Data is invalid @[StageID.scala 37:6]
    io.ctrl.forward.rs1Data is invalid @[StageID.scala 37:6]
    io.ctrl.forward.instr is invalid @[StageID.scala 37:6]
    io.ctrl.decode.brSrc is invalid @[StageID.scala 37:6]
    io.ctrl.decode.regSrc is invalid @[StageID.scala 37:6]
    io.ctrl.decode.memRd is invalid @[StageID.scala 37:6]
    io.ctrl.decode.memWr is invalid @[StageID.scala 37:6]
    io.ctrl.decode.regWr is invalid @[StageID.scala 37:6]
    io.ctrl.decode.aluOp is invalid @[StageID.scala 37:6]
    io.ctrl.decode.aluSrc is invalid @[StageID.scala 37:6]
    io.ctrl.decode.pcSrc is invalid @[StageID.scala 37:6]
    io.ctrl.instr is invalid @[StageID.scala 37:6]
    io.lastPipe.instr is invalid @[StageID.scala 37:6]
    io.lastPipe.pc is invalid @[StageID.scala 37:6]
    inst regFile of Registers @[StageID.scala 40:23]
    regFile.clock <= clock
    regFile.reset <= reset
    node rs1 = bits(io.lastPipe.instr, 19, 15) @[StageID.scala 44:24]
    node rs2 = bits(io.lastPipe.instr, 24, 20) @[StageID.scala 45:24]
    node rd = bits(io.lastPipe.instr, 11, 7) @[StageID.scala 46:23]
    regFile.io.rs1 <= rs1 @[StageID.scala 51:18]
    regFile.io.rs2 <= rs2 @[StageID.scala 52:18]
    regFile.io.rd <= io.misc.wbAddr @[StageID.scala 53:17]
    regFile.io.dataRd <= io.misc.wbData @[StageID.scala 54:21]
    regFile.io.wren <= io.misc.wbEn @[StageID.scala 55:19]
    io.ctrl.instr <= io.lastPipe.instr @[StageID.scala 59:14]
    wire _T : {pcSrc : UInt<4>, aluSrc : UInt<4>, aluOp : UInt<4>, regWr : UInt<1>, memWr : UInt<1>, memRd : UInt<1>, regSrc : UInt<4>, brSrc : UInt<4>} @[StageID.scala 66:41]
    _T.brSrc <= UInt<4>("h00") @[StageID.scala 66:41]
    _T.regSrc <= UInt<4>("h00") @[StageID.scala 66:41]
    _T.memRd <= UInt<1>("h00") @[StageID.scala 66:41]
    _T.memWr <= UInt<1>("h00") @[StageID.scala 66:41]
    _T.regWr <= UInt<1>("h00") @[StageID.scala 66:41]
    _T.aluOp <= UInt<4>("h00") @[StageID.scala 66:41]
    _T.aluSrc <= UInt<4>("h00") @[StageID.scala 66:41]
    _T.pcSrc <= UInt<4>("h00") @[StageID.scala 66:41]
    reg regPipeCtrl : {pcSrc : UInt<4>, aluSrc : UInt<4>, aluOp : UInt<4>, regWr : UInt<1>, memWr : UInt<1>, memRd : UInt<1>, regSrc : UInt<4>, brSrc : UInt<4>}, clock with : (reset => (reset, _T)) @[StageID.scala 66:28]
    node _T_1 = or(io.misc.stall, io.misc.flush) @[StageID.scala 67:15]
    when _T_1 : @[StageID.scala 67:24]
      wire _T_2 : {pcSrc : UInt<4>, aluSrc : UInt<4>, aluOp : UInt<4>, regWr : UInt<1>, memWr : UInt<1>, memRd : UInt<1>, regSrc : UInt<4>, brSrc : UInt<4>} @[StageID.scala 68:32]
      _T_2.brSrc <= UInt<4>("h00") @[StageID.scala 68:32]
      _T_2.regSrc <= UInt<4>("h00") @[StageID.scala 68:32]
      _T_2.memRd <= UInt<1>("h00") @[StageID.scala 68:32]
      _T_2.memWr <= UInt<1>("h00") @[StageID.scala 68:32]
      _T_2.regWr <= UInt<1>("h00") @[StageID.scala 68:32]
      _T_2.aluOp <= UInt<4>("h00") @[StageID.scala 68:32]
      _T_2.aluSrc <= UInt<4>("h00") @[StageID.scala 68:32]
      _T_2.pcSrc <= UInt<4>("h00") @[StageID.scala 68:32]
      regPipeCtrl.brSrc <= _T_2.brSrc @[StageID.scala 68:17]
      regPipeCtrl.regSrc <= _T_2.regSrc @[StageID.scala 68:17]
      regPipeCtrl.memRd <= _T_2.memRd @[StageID.scala 68:17]
      regPipeCtrl.memWr <= _T_2.memWr @[StageID.scala 68:17]
      regPipeCtrl.regWr <= _T_2.regWr @[StageID.scala 68:17]
      regPipeCtrl.aluOp <= _T_2.aluOp @[StageID.scala 68:17]
      regPipeCtrl.aluSrc <= _T_2.aluSrc @[StageID.scala 68:17]
      regPipeCtrl.pcSrc <= _T_2.pcSrc @[StageID.scala 68:17]
      skip @[StageID.scala 67:24]
    else : @[StageID.scala 69:5]
      regPipeCtrl.brSrc <= io.ctrl.decode.brSrc @[StageID.scala 70:17]
      regPipeCtrl.regSrc <= io.ctrl.decode.regSrc @[StageID.scala 70:17]
      regPipeCtrl.memRd <= io.ctrl.decode.memRd @[StageID.scala 70:17]
      regPipeCtrl.memWr <= io.ctrl.decode.memWr @[StageID.scala 70:17]
      regPipeCtrl.regWr <= io.ctrl.decode.regWr @[StageID.scala 70:17]
      regPipeCtrl.aluOp <= io.ctrl.decode.aluOp @[StageID.scala 70:17]
      regPipeCtrl.aluSrc <= io.ctrl.decode.aluSrc @[StageID.scala 70:17]
      regPipeCtrl.pcSrc <= io.ctrl.decode.pcSrc @[StageID.scala 70:17]
      skip @[StageID.scala 69:5]
    io.ctrl.forward.instr <= io.lastPipe.instr @[StageID.scala 74:17]
    io.ctrl.forward.rs1Data <= regFile.io.dataRs1 @[StageID.scala 75:19]
    io.ctrl.forward.rs2Data <= regFile.io.dataRs2 @[StageID.scala 76:19]
    wire _T_3 : {pc : UInt<32>, instr : UInt<32>, aluOp1 : UInt<32>, aluOp2 : UInt<32>} @[StageID.scala 81:37]
    _T_3.aluOp2 <= UInt<32>("h00") @[StageID.scala 81:37]
    _T_3.aluOp1 <= UInt<32>("h00") @[StageID.scala 81:37]
    _T_3.instr <= UInt<32>("h00") @[StageID.scala 81:37]
    _T_3.pc <= UInt<32>("h00") @[StageID.scala 81:37]
    reg regPipe : {pc : UInt<32>, instr : UInt<32>, aluOp1 : UInt<32>, aluOp2 : UInt<32>}, clock with : (reset => (reset, _T_3)) @[StageID.scala 81:24]
    when io.misc.flush : @[StageID.scala 82:16]
      wire _T_4 : {pc : UInt<32>, instr : UInt<32>, aluOp1 : UInt<32>, aluOp2 : UInt<32>} @[StageID.scala 83:28]
      _T_4.aluOp2 <= UInt<32>("h00") @[StageID.scala 83:28]
      _T_4.aluOp1 <= UInt<32>("h00") @[StageID.scala 83:28]
      _T_4.instr <= UInt<32>("h00") @[StageID.scala 83:28]
      _T_4.pc <= UInt<32>("h00") @[StageID.scala 83:28]
      regPipe.aluOp2 <= _T_4.aluOp2 @[StageID.scala 83:13]
      regPipe.aluOp1 <= _T_4.aluOp1 @[StageID.scala 83:13]
      regPipe.instr <= _T_4.instr @[StageID.scala 83:13]
      regPipe.pc <= _T_4.pc @[StageID.scala 83:13]
      regPipe.instr <= UInt<32>("h04033") @[StageID.scala 84:19]
      skip @[StageID.scala 82:16]
    else : @[StageID.scala 85:24]
      node _T_5 = eq(io.misc.stall, UInt<1>("h00")) @[StageID.scala 85:16]
      when _T_5 : @[StageID.scala 85:24]
        regPipe.instr <= io.lastPipe.instr @[StageID.scala 86:19]
        regPipe.pc <= io.lastPipe.pc @[StageID.scala 87:16]
        regPipe.aluOp1 <= io.ctrl.forward.aluOp1 @[StageID.scala 88:20]
        regPipe.aluOp2 <= io.ctrl.forward.aluOp2 @[StageID.scala 89:20]
        skip @[StageID.scala 85:24]
    io.pipeCtrl.brSrc <= regPipeCtrl.brSrc @[StageID.scala 93:15]
    io.pipeCtrl.regSrc <= regPipeCtrl.regSrc @[StageID.scala 93:15]
    io.pipeCtrl.memRd <= regPipeCtrl.memRd @[StageID.scala 93:15]
    io.pipeCtrl.memWr <= regPipeCtrl.memWr @[StageID.scala 93:15]
    io.pipeCtrl.regWr <= regPipeCtrl.regWr @[StageID.scala 93:15]
    io.pipeCtrl.aluOp <= regPipeCtrl.aluOp @[StageID.scala 93:15]
    io.pipeCtrl.aluSrc <= regPipeCtrl.aluSrc @[StageID.scala 93:15]
    io.pipeCtrl.pcSrc <= regPipeCtrl.pcSrc @[StageID.scala 93:15]
    io.pipe.aluOp2 <= regPipe.aluOp2 @[StageID.scala 94:11]
    io.pipe.aluOp1 <= regPipe.aluOp1 @[StageID.scala 94:11]
    io.pipe.instr <= regPipe.instr @[StageID.scala 94:11]
    io.pipe.pc <= regPipe.pc @[StageID.scala 94:11]
    
