;buildInfoPackage: chisel3, version: 3.3.0-RC3, scalaVersion: 2.12.11, sbtVersion: 1.3.8
circuit Cache : 
  module Cache : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip cacheReq : {flip ready : UInt<1>, valid : UInt<1>, bits : {wr : UInt<1>, addr : UInt<32>, data : UInt<32>}}, cacheRespBundle : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>}}, memReq : {valid : UInt<1>, bits : {wr : UInt<1>, addr : UInt<32>, data : UInt<128>}}, flip memResp : {valid : UInt<1>, bits : {data : UInt<128>}}}
    
    smem tags : {valid : UInt<1>, dirty : UInt<1>, tag : UInt<18>}[1024], undefined @[Cache.scala 55:25]
    smem datas : UInt<32>[4][1024], undefined @[Cache.scala 56:26]
    node _T = and(io.cacheReq.ready, io.cacheReq.valid) @[Decoupled.scala 40:37]
    reg _T_1 : {wr : UInt<1>, addr : UInt<32>, data : UInt<32>}, clock @[Reg.scala 15:16]
    when _T : @[Reg.scala 16:19]
      _T_1.data <= io.cacheReq.bits.data @[Reg.scala 16:23]
      _T_1.addr <= io.cacheReq.bits.addr @[Reg.scala 16:23]
      _T_1.wr <= io.cacheReq.bits.wr @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    wire reqReg : {wr : UInt<1>, addr : UInt<32>, data : UInt<32>} @[Cache.scala 58:72]
    node _T_2 = cat(_T_1.wr, _T_1.addr) @[Cache.scala 58:72]
    node _T_3 = cat(_T_2, _T_1.data) @[Cache.scala 58:72]
    wire _T_4 : UInt<65>
    _T_4 <= _T_3
    node _T_5 = bits(_T_4, 31, 0) @[Cache.scala 58:72]
    reqReg.data <= _T_5 @[Cache.scala 58:72]
    node _T_6 = bits(_T_4, 63, 32) @[Cache.scala 58:72]
    reqReg.addr <= _T_6 @[Cache.scala 58:72]
    node _T_7 = bits(_T_4, 64, 64) @[Cache.scala 58:72]
    reqReg.wr <= _T_7 @[Cache.scala 58:72]
    reg valid : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Cache.scala 59:22]
    node _T_8 = eq(valid, UInt<1>("h00")) @[Cache.scala 60:30]
    io.cacheReq.ready <= _T_8 @[Cache.scala 60:21]
    node _T_9 = and(io.cacheReq.ready, io.cacheReq.valid) @[Decoupled.scala 40:37]
    when _T_9 : @[Cache.scala 61:29]
      valid <= UInt<1>("h01") @[Cache.scala 61:36]
      skip @[Cache.scala 61:29]
    wire addrReq : {tag : UInt<18>, line : UInt<10>, word : UInt<2>, byte : UInt<2>} @[Cache.scala 63:47]
    wire _T_10 : UInt<32>
    _T_10 <= io.cacheReq.bits.addr
    node _T_11 = bits(_T_10, 1, 0) @[Cache.scala 63:47]
    addrReq.byte <= _T_11 @[Cache.scala 63:47]
    node _T_12 = bits(_T_10, 3, 2) @[Cache.scala 63:47]
    addrReq.word <= _T_12 @[Cache.scala 63:47]
    node _T_13 = bits(_T_10, 13, 4) @[Cache.scala 63:47]
    addrReq.line <= _T_13 @[Cache.scala 63:47]
    node _T_14 = bits(_T_10, 31, 14) @[Cache.scala 63:47]
    addrReq.tag <= _T_14 @[Cache.scala 63:47]
    wire addrReg : {tag : UInt<18>, line : UInt<10>, word : UInt<2>, byte : UInt<2>} @[Cache.scala 64:37]
    wire _T_15 : UInt<32>
    _T_15 <= reqReg.addr
    node _T_16 = bits(_T_15, 1, 0) @[Cache.scala 64:37]
    addrReg.byte <= _T_16 @[Cache.scala 64:37]
    node _T_17 = bits(_T_15, 3, 2) @[Cache.scala 64:37]
    addrReg.word <= _T_17 @[Cache.scala 64:37]
    node _T_18 = bits(_T_15, 13, 4) @[Cache.scala 64:37]
    addrReg.line <= _T_18 @[Cache.scala 64:37]
    node _T_19 = bits(_T_15, 31, 14) @[Cache.scala 64:37]
    addrReg.tag <= _T_19 @[Cache.scala 64:37]
    node _T_20 = and(io.cacheReq.ready, io.cacheReq.valid) @[Decoupled.scala 40:37]
    wire _T_21 : UInt @[Cache.scala 65:22]
    _T_21 is invalid @[Cache.scala 65:22]
    when _T_20 : @[Cache.scala 65:22]
      _T_21 <= addrReq.line @[Cache.scala 65:22]
      node _T_22 = or(_T_21, UInt<10>("h00")) @[Cache.scala 65:22]
      node _T_23 = bits(_T_22, 9, 0) @[Cache.scala 65:22]
      read mport tag = tags[_T_23], clock @[Cache.scala 65:22]
      skip @[Cache.scala 65:22]
    node _T_24 = and(io.cacheReq.ready, io.cacheReq.valid) @[Decoupled.scala 40:37]
    wire _T_25 : UInt @[Cache.scala 66:24]
    _T_25 is invalid @[Cache.scala 66:24]
    when _T_24 : @[Cache.scala 66:24]
      _T_25 <= addrReq.line @[Cache.scala 66:24]
      node _T_26 = or(_T_25, UInt<10>("h00")) @[Cache.scala 66:24]
      node _T_27 = bits(_T_26, 9, 0) @[Cache.scala 66:24]
      read mport data = datas[_T_27], clock @[Cache.scala 66:24]
      skip @[Cache.scala 66:24]
    node _T_28 = eq(tag.tag, addrReq.tag) @[Cache.scala 68:34]
    node hit = and(tag.valid, _T_28) @[Cache.scala 68:23]
    wire writeMem : UInt<1>
    writeMem <= UInt<1>("h00")
    wire readMem : UInt<1>
    readMem <= UInt<1>("h00")
    node _T_29 = cat(addrReg.word, UInt<1>("h00")) @[Cat.scala 29:58]
    node _T_30 = cat(tag.tag, addrReg.line) @[Cat.scala 29:58]
    node writeMemAddr = cat(_T_30, _T_29) @[Cat.scala 29:58]
    node _T_31 = cat(addrReg.word, UInt<1>("h00")) @[Cat.scala 29:58]
    node _T_32 = cat(addrReg.tag, addrReg.line) @[Cat.scala 29:58]
    node readMemAddr = cat(_T_32, _T_31) @[Cat.scala 29:58]
    io.memReq.bits.wr <= writeMem @[Cache.scala 74:21]
    node _T_33 = mux(writeMem, writeMemAddr, readMemAddr) @[Cache.scala 75:29]
    io.memReq.bits.addr <= _T_33 @[Cache.scala 75:23]
    node _T_34 = cat(data[1], data[0]) @[Cache.scala 76:37]
    node _T_35 = cat(data[3], data[2]) @[Cache.scala 76:37]
    node _T_36 = cat(_T_35, _T_34) @[Cache.scala 76:37]
    io.memReq.bits.data <= _T_36 @[Cache.scala 76:23]
    wire cacheWrite : {valid : UInt<1>, sel : UInt<1>, addr : UInt<32>, word : UInt<32>, line : UInt<128>} @[Cache.scala 79:24]
    when cacheWrite.valid : @[Cache.scala 80:27]
      wire _T_37 : {tag : UInt<18>, line : UInt<10>, word : UInt<2>, byte : UInt<2>} @[Cache.scala 81:45]
      wire _T_38 : UInt<32>
      _T_38 <= cacheWrite.addr
      node _T_39 = bits(_T_38, 1, 0) @[Cache.scala 81:45]
      _T_37.byte <= _T_39 @[Cache.scala 81:45]
      node _T_40 = bits(_T_38, 3, 2) @[Cache.scala 81:45]
      _T_37.word <= _T_40 @[Cache.scala 81:45]
      node _T_41 = bits(_T_38, 13, 4) @[Cache.scala 81:45]
      _T_37.line <= _T_41 @[Cache.scala 81:45]
      node _T_42 = bits(_T_38, 31, 14) @[Cache.scala 81:45]
      _T_37.tag <= _T_42 @[Cache.scala 81:45]
      infer mport _T_43 = tags[_T_37.line], clock @[Cache.scala 81:20]
      wire _T_44 : {tag : UInt<18>, line : UInt<10>, word : UInt<2>, byte : UInt<2>} @[Cache.scala 82:37]
      wire _T_45 : UInt<32>
      _T_45 <= reqReg.addr
      node _T_46 = bits(_T_45, 1, 0) @[Cache.scala 82:37]
      _T_44.byte <= _T_46 @[Cache.scala 82:37]
      node _T_47 = bits(_T_45, 3, 2) @[Cache.scala 82:37]
      _T_44.word <= _T_47 @[Cache.scala 82:37]
      node _T_48 = bits(_T_45, 13, 4) @[Cache.scala 82:37]
      _T_44.line <= _T_48 @[Cache.scala 82:37]
      node _T_49 = bits(_T_45, 31, 14) @[Cache.scala 82:37]
      _T_44.tag <= _T_49 @[Cache.scala 82:37]
      _T_43.tag <= _T_44.tag @[Cache.scala 82:14]
      _T_43.valid <= UInt<1>("h01") @[Cache.scala 83:16]
      _T_43.dirty <= UInt<1>("h01") @[Cache.scala 84:16]
      skip @[Cache.scala 80:27]
    when cacheWrite.valid : @[Cache.scala 87:27]
      wire _T_50 : {tag : UInt<18>, line : UInt<10>, word : UInt<2>, byte : UInt<2>} @[Cache.scala 88:40]
      wire _T_51 : UInt<32>
      _T_51 <= cacheWrite.addr
      node _T_52 = bits(_T_51, 1, 0) @[Cache.scala 88:40]
      _T_50.byte <= _T_52 @[Cache.scala 88:40]
      node _T_53 = bits(_T_51, 3, 2) @[Cache.scala 88:40]
      _T_50.word <= _T_53 @[Cache.scala 88:40]
      node _T_54 = bits(_T_51, 13, 4) @[Cache.scala 88:40]
      _T_50.line <= _T_54 @[Cache.scala 88:40]
      node _T_55 = bits(_T_51, 31, 14) @[Cache.scala 88:40]
      _T_50.tag <= _T_55 @[Cache.scala 88:40]
      infer mport _T_56 = datas[_T_50.line], clock @[Cache.scala 89:21]
      when cacheWrite.sel : @[Cache.scala 90:27]
        wire _T_57 : UInt<32>[4] @[Cache.scala 90:60]
        wire _T_58 : UInt<128>
        _T_58 <= cacheWrite.line
        node _T_59 = bits(_T_58, 31, 0) @[Cache.scala 90:60]
        _T_57[0] <= _T_59 @[Cache.scala 90:60]
        node _T_60 = bits(_T_58, 63, 32) @[Cache.scala 90:60]
        _T_57[1] <= _T_60 @[Cache.scala 90:60]
        node _T_61 = bits(_T_58, 95, 64) @[Cache.scala 90:60]
        _T_57[2] <= _T_61 @[Cache.scala 90:60]
        node _T_62 = bits(_T_58, 127, 96) @[Cache.scala 90:60]
        _T_57[3] <= _T_62 @[Cache.scala 90:60]
        _T_56[0] <= _T_57[0] @[Cache.scala 90:33]
        _T_56[1] <= _T_57[1] @[Cache.scala 90:33]
        _T_56[2] <= _T_57[2] @[Cache.scala 90:33]
        _T_56[3] <= _T_57[3] @[Cache.scala 90:33]
        skip @[Cache.scala 90:27]
      else : @[Cache.scala 91:17]
        _T_56[_T_50.word] <= cacheWrite.word @[Cache.scala 91:34]
        skip @[Cache.scala 91:17]
      skip @[Cache.scala 87:27]
    cacheWrite.line <= io.memResp.bits.data @[Cache.scala 93:19]
    cacheWrite.word <= io.cacheReq.bits.data @[Cache.scala 94:19]
    cacheWrite.addr <= reqReg.addr @[Cache.scala 95:19]
    reg state : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Cache.scala 98:22]
    node _T_63 = eq(UInt<3>("h00"), state) @[Conditional.scala 37:30]
    when _T_63 : @[Conditional.scala 40:58]
      when valid : @[Cache.scala 101:20]
        when hit : @[Cache.scala 102:20]
          state <= UInt<3>("h05") @[Cache.scala 103:17]
          valid <= UInt<1>("h00") @[Cache.scala 104:17]
          skip @[Cache.scala 102:20]
        else : @[Cache.scala 105:44]
          node _T_64 = and(tag.valid, tag.dirty) @[Cache.scala 105:30]
          when _T_64 : @[Cache.scala 105:44]
            state <= UInt<3>("h01") @[Cache.scala 105:52]
            skip @[Cache.scala 105:44]
        skip @[Cache.scala 101:20]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_65 = eq(UInt<3>("h01"), state) @[Conditional.scala 37:30]
      when _T_65 : @[Conditional.scala 39:67]
        state <= UInt<3>("h02") @[Cache.scala 108:30]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_66 = eq(UInt<3>("h02"), state) @[Conditional.scala 37:30]
        when _T_66 : @[Conditional.scala 39:67]
          when io.memResp.valid : @[Cache.scala 109:50]
            state <= UInt<3>("h03") @[Cache.scala 109:57]
            skip @[Cache.scala 109:50]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_67 = eq(UInt<3>("h03"), state) @[Conditional.scala 37:30]
          when _T_67 : @[Conditional.scala 39:67]
            state <= UInt<3>("h04") @[Cache.scala 110:28]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_68 = eq(UInt<3>("h04"), state) @[Conditional.scala 37:30]
            when _T_68 : @[Conditional.scala 39:67]
              when io.memResp.valid : @[Cache.scala 112:32]
                state <= UInt<3>("h05") @[Cache.scala 113:15]
                valid <= UInt<1>("h00") @[Cache.scala 114:15]
                skip @[Cache.scala 112:32]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_69 = eq(UInt<3>("h05"), state) @[Conditional.scala 37:30]
              when _T_69 : @[Conditional.scala 39:67]
                node _T_70 = and(io.cacheRespBundle.ready, io.cacheRespBundle.valid) @[Decoupled.scala 40:37]
                when _T_70 : @[Cache.scala 117:51]
                  state <= UInt<3>("h00") @[Cache.scala 117:58]
                  skip @[Cache.scala 117:51]
                skip @[Conditional.scala 39:67]
    node _T_71 = eq(state, UInt<3>("h01")) @[Cache.scala 120:28]
    node _T_72 = eq(state, UInt<3>("h03")) @[Cache.scala 120:53]
    node _T_73 = or(_T_71, _T_72) @[Cache.scala 120:44]
    io.memReq.valid <= _T_73 @[Cache.scala 120:19]
    node _T_74 = eq(state, UInt<3>("h05")) @[Cache.scala 121:29]
    cacheWrite.valid <= _T_74 @[Cache.scala 121:20]
    node _T_75 = eq(state, UInt<3>("h04")) @[Cache.scala 122:27]
    cacheWrite.sel <= _T_75 @[Cache.scala 122:18]
    node _T_76 = eq(state, UInt<3>("h05")) @[Cache.scala 123:37]
    io.cacheRespBundle.valid <= _T_76 @[Cache.scala 123:28]
    node _T_77 = eq(state, UInt<3>("h04")) @[Cache.scala 124:45]
    node _T_78 = dshr(io.memResp.bits.data, addrReg.word) @[Cache.scala 124:82]
    node _T_79 = bits(_T_78, 0, 0) @[Cache.scala 124:82]
    node _T_80 = mux(_T_77, _T_79, data[addrReg.word]) @[Cache.scala 124:38]
    io.cacheRespBundle.bits.data <= _T_80 @[Cache.scala 124:32]
    
