;buildInfoPackage: chisel3, version: 3.3.0-RC3, scalaVersion: 2.12.11, sbtVersion: 1.3.8
circuit Cache : 
  module Cache : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip cacheReq : {flip ready : UInt<1>, valid : UInt<1>, bits : {wr : UInt<1>, addr : UInt<32>, data : UInt<32>}}, cacheResp : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>}}, memReq : {valid : UInt<1>, bits : {wr : UInt<1>, addr : UInt<32>, data : UInt<128>}}, flip memResp : {valid : UInt<1>, bits : {data : UInt<128>}}, data : UInt<32>[4]}
    
    smem tags : {valid : UInt<1>, dirty : UInt<1>, tag : UInt<18>}[1024], undefined @[Cache.scala 56:25]
    smem datas : UInt<32>[4][1024], undefined @[Cache.scala 57:26]
    node _T = and(io.cacheReq.ready, io.cacheReq.valid) @[Decoupled.scala 40:37]
    reg _T_1 : {wr : UInt<1>, addr : UInt<32>, data : UInt<32>}, clock @[Reg.scala 15:16]
    when _T : @[Reg.scala 16:19]
      _T_1.data <= io.cacheReq.bits.data @[Reg.scala 16:23]
      _T_1.addr <= io.cacheReq.bits.addr @[Reg.scala 16:23]
      _T_1.wr <= io.cacheReq.bits.wr @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    wire reqReg : {wr : UInt<1>, addr : UInt<32>, data : UInt<32>} @[Cache.scala 59:72]
    node _T_2 = cat(_T_1.wr, _T_1.addr) @[Cache.scala 59:72]
    node _T_3 = cat(_T_2, _T_1.data) @[Cache.scala 59:72]
    wire _T_4 : UInt<65>
    _T_4 <= _T_3
    node _T_5 = bits(_T_4, 31, 0) @[Cache.scala 59:72]
    reqReg.data <= _T_5 @[Cache.scala 59:72]
    node _T_6 = bits(_T_4, 63, 32) @[Cache.scala 59:72]
    reqReg.addr <= _T_6 @[Cache.scala 59:72]
    node _T_7 = bits(_T_4, 64, 64) @[Cache.scala 59:72]
    reqReg.wr <= _T_7 @[Cache.scala 59:72]
    reg valid : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Cache.scala 60:22]
    node _T_8 = eq(valid, UInt<1>("h00")) @[Cache.scala 61:30]
    io.cacheReq.ready <= _T_8 @[Cache.scala 61:21]
    node _T_9 = and(io.cacheReq.ready, io.cacheReq.valid) @[Decoupled.scala 40:37]
    when _T_9 : @[Cache.scala 62:29]
      valid <= UInt<1>("h01") @[Cache.scala 62:36]
      skip @[Cache.scala 62:29]
    wire addrReq : {tag : UInt<18>, line : UInt<10>, word : UInt<2>, byte : UInt<2>} @[Cache.scala 64:47]
    wire _T_10 : UInt<32>
    _T_10 <= io.cacheReq.bits.addr
    node _T_11 = bits(_T_10, 1, 0) @[Cache.scala 64:47]
    addrReq.byte <= _T_11 @[Cache.scala 64:47]
    node _T_12 = bits(_T_10, 3, 2) @[Cache.scala 64:47]
    addrReq.word <= _T_12 @[Cache.scala 64:47]
    node _T_13 = bits(_T_10, 13, 4) @[Cache.scala 64:47]
    addrReq.line <= _T_13 @[Cache.scala 64:47]
    node _T_14 = bits(_T_10, 31, 14) @[Cache.scala 64:47]
    addrReq.tag <= _T_14 @[Cache.scala 64:47]
    wire addrReg : {tag : UInt<18>, line : UInt<10>, word : UInt<2>, byte : UInt<2>} @[Cache.scala 65:37]
    wire _T_15 : UInt<32>
    _T_15 <= reqReg.addr
    node _T_16 = bits(_T_15, 1, 0) @[Cache.scala 65:37]
    addrReg.byte <= _T_16 @[Cache.scala 65:37]
    node _T_17 = bits(_T_15, 3, 2) @[Cache.scala 65:37]
    addrReg.word <= _T_17 @[Cache.scala 65:37]
    node _T_18 = bits(_T_15, 13, 4) @[Cache.scala 65:37]
    addrReg.line <= _T_18 @[Cache.scala 65:37]
    node _T_19 = bits(_T_15, 31, 14) @[Cache.scala 65:37]
    addrReg.tag <= _T_19 @[Cache.scala 65:37]
    node _T_20 = and(io.cacheReq.ready, io.cacheReq.valid) @[Decoupled.scala 40:37]
    wire _T_21 : UInt @[Cache.scala 66:22]
    _T_21 is invalid @[Cache.scala 66:22]
    when _T_20 : @[Cache.scala 66:22]
      _T_21 <= addrReq.line @[Cache.scala 66:22]
      node _T_22 = or(_T_21, UInt<10>("h00")) @[Cache.scala 66:22]
      node _T_23 = bits(_T_22, 9, 0) @[Cache.scala 66:22]
      read mport tag = tags[_T_23], clock @[Cache.scala 66:22]
      skip @[Cache.scala 66:22]
    node _T_24 = and(io.cacheReq.ready, io.cacheReq.valid) @[Decoupled.scala 40:37]
    wire _T_25 : UInt @[Cache.scala 67:24]
    _T_25 is invalid @[Cache.scala 67:24]
    when _T_24 : @[Cache.scala 67:24]
      _T_25 <= addrReq.line @[Cache.scala 67:24]
      node _T_26 = or(_T_25, UInt<10>("h00")) @[Cache.scala 67:24]
      node _T_27 = bits(_T_26, 9, 0) @[Cache.scala 67:24]
      read mport data = datas[_T_27], clock @[Cache.scala 67:24]
      skip @[Cache.scala 67:24]
    io.data[0] <= data[0] @[Cache.scala 68:11]
    io.data[1] <= data[1] @[Cache.scala 68:11]
    io.data[2] <= data[2] @[Cache.scala 68:11]
    io.data[3] <= data[3] @[Cache.scala 68:11]
    node _T_28 = eq(tag.tag, addrReg.tag) @[Cache.scala 70:34]
    node hit = and(tag.valid, _T_28) @[Cache.scala 70:23]
    wire writeMem : UInt<1>
    writeMem <= UInt<1>("h00")
    wire readMem : UInt<1>
    readMem <= UInt<1>("h00")
    node _T_29 = cat(tag.tag, addrReg.line) @[Cat.scala 29:58]
    node writeMemAddr = cat(_T_29, UInt<4>("h00")) @[Cat.scala 29:58]
    node _T_30 = cat(addrReg.tag, addrReg.line) @[Cat.scala 29:58]
    node readMemAddr = cat(_T_30, UInt<4>("h00")) @[Cat.scala 29:58]
    io.memReq.bits.wr <= writeMem @[Cache.scala 76:21]
    node _T_31 = mux(writeMem, writeMemAddr, readMemAddr) @[Cache.scala 77:29]
    io.memReq.bits.addr <= _T_31 @[Cache.scala 77:23]
    node _T_32 = cat(data[1], data[0]) @[Cache.scala 78:37]
    node _T_33 = cat(data[3], data[2]) @[Cache.scala 78:37]
    node _T_34 = cat(_T_33, _T_32) @[Cache.scala 78:37]
    io.memReq.bits.data <= _T_34 @[Cache.scala 78:23]
    wire cacheWrite : {valid : UInt<1>, sel : UInt<1>, addr : UInt<32>, word : UInt<32>, line : UInt<32>[4]} @[Cache.scala 81:24]
    when cacheWrite.valid : @[Cache.scala 82:27]
      wire _T_35 : {tag : UInt<18>, line : UInt<10>, word : UInt<2>, byte : UInt<2>} @[Cache.scala 83:45]
      wire _T_36 : UInt<32>
      _T_36 <= cacheWrite.addr
      node _T_37 = bits(_T_36, 1, 0) @[Cache.scala 83:45]
      _T_35.byte <= _T_37 @[Cache.scala 83:45]
      node _T_38 = bits(_T_36, 3, 2) @[Cache.scala 83:45]
      _T_35.word <= _T_38 @[Cache.scala 83:45]
      node _T_39 = bits(_T_36, 13, 4) @[Cache.scala 83:45]
      _T_35.line <= _T_39 @[Cache.scala 83:45]
      node _T_40 = bits(_T_36, 31, 14) @[Cache.scala 83:45]
      _T_35.tag <= _T_40 @[Cache.scala 83:45]
      infer mport _T_41 = tags[_T_35.line], clock @[Cache.scala 83:20]
      wire _T_42 : {tag : UInt<18>, line : UInt<10>, word : UInt<2>, byte : UInt<2>} @[Cache.scala 84:37]
      wire _T_43 : UInt<32>
      _T_43 <= reqReg.addr
      node _T_44 = bits(_T_43, 1, 0) @[Cache.scala 84:37]
      _T_42.byte <= _T_44 @[Cache.scala 84:37]
      node _T_45 = bits(_T_43, 3, 2) @[Cache.scala 84:37]
      _T_42.word <= _T_45 @[Cache.scala 84:37]
      node _T_46 = bits(_T_43, 13, 4) @[Cache.scala 84:37]
      _T_42.line <= _T_46 @[Cache.scala 84:37]
      node _T_47 = bits(_T_43, 31, 14) @[Cache.scala 84:37]
      _T_42.tag <= _T_47 @[Cache.scala 84:37]
      _T_41.tag <= _T_42.tag @[Cache.scala 84:14]
      _T_41.valid <= UInt<1>("h01") @[Cache.scala 85:16]
      _T_41.dirty <= UInt<1>("h01") @[Cache.scala 86:16]
      skip @[Cache.scala 82:27]
    when cacheWrite.valid : @[Cache.scala 89:27]
      wire _T_48 : {tag : UInt<18>, line : UInt<10>, word : UInt<2>, byte : UInt<2>} @[Cache.scala 90:40]
      wire _T_49 : UInt<32>
      _T_49 <= cacheWrite.addr
      node _T_50 = bits(_T_49, 1, 0) @[Cache.scala 90:40]
      _T_48.byte <= _T_50 @[Cache.scala 90:40]
      node _T_51 = bits(_T_49, 3, 2) @[Cache.scala 90:40]
      _T_48.word <= _T_51 @[Cache.scala 90:40]
      node _T_52 = bits(_T_49, 13, 4) @[Cache.scala 90:40]
      _T_48.line <= _T_52 @[Cache.scala 90:40]
      node _T_53 = bits(_T_49, 31, 14) @[Cache.scala 90:40]
      _T_48.tag <= _T_53 @[Cache.scala 90:40]
      when cacheWrite.sel : @[Cache.scala 91:27]
        infer mport _T_54 = datas[_T_48.line], clock @[Cache.scala 92:12]
        _T_54[0] <= cacheWrite.line[0] @[Cache.scala 92:24]
        _T_54[1] <= cacheWrite.line[1] @[Cache.scala 92:24]
        _T_54[2] <= cacheWrite.line[2] @[Cache.scala 92:24]
        _T_54[3] <= cacheWrite.line[3] @[Cache.scala 92:24]
        skip @[Cache.scala 91:27]
      else : @[Cache.scala 94:17]
        infer mport _T_55 = datas[_T_48.line], clock @[Cache.scala 94:23]
        _T_55[_T_48.word] <= cacheWrite.word @[Cache.scala 94:46]
        skip @[Cache.scala 94:17]
      skip @[Cache.scala 89:27]
    wire _T_56 : UInt<32>[4] @[Cache.scala 96:51]
    wire _T_57 : UInt<128>
    _T_57 <= io.memResp.bits.data
    node _T_58 = bits(_T_57, 31, 0) @[Cache.scala 96:51]
    _T_56[0] <= _T_58 @[Cache.scala 96:51]
    node _T_59 = bits(_T_57, 63, 32) @[Cache.scala 96:51]
    _T_56[1] <= _T_59 @[Cache.scala 96:51]
    node _T_60 = bits(_T_57, 95, 64) @[Cache.scala 96:51]
    _T_56[2] <= _T_60 @[Cache.scala 96:51]
    node _T_61 = bits(_T_57, 127, 96) @[Cache.scala 96:51]
    _T_56[3] <= _T_61 @[Cache.scala 96:51]
    cacheWrite.line[0] <= _T_56[0] @[Cache.scala 96:19]
    cacheWrite.line[1] <= _T_56[1] @[Cache.scala 96:19]
    cacheWrite.line[2] <= _T_56[2] @[Cache.scala 96:19]
    cacheWrite.line[3] <= _T_56[3] @[Cache.scala 96:19]
    when reqReg.wr : @[Cache.scala 97:20]
      cacheWrite.line[addrReg.word] <= reqReg.data @[Cache.scala 98:35]
      node _T_62 = cat(cacheWrite.line[1], cacheWrite.line[0]) @[Cache.scala 99:87]
      node _T_63 = cat(cacheWrite.line[3], cacheWrite.line[2]) @[Cache.scala 99:87]
      node _T_64 = cat(_T_63, _T_62) @[Cache.scala 99:87]
      node _T_65 = bits(reset, 0, 0) @[Cache.scala 99:11]
      node _T_66 = eq(_T_65, UInt<1>("h00")) @[Cache.scala 99:11]
      when _T_66 : @[Cache.scala 99:11]
        printf(clock, UInt<1>(1), "write data: %x, cachwrite line: %x\n", reqReg.data, _T_64) @[Cache.scala 99:11]
        skip @[Cache.scala 99:11]
      skip @[Cache.scala 97:20]
    cacheWrite.word <= reqReg.data @[Cache.scala 101:19]
    cacheWrite.addr <= reqReg.addr @[Cache.scala 102:19]
    reg state : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Cache.scala 105:22]
    wire jump2finish : UInt<1>
    jump2finish <= UInt<1>("h00")
    node _T_67 = eq(UInt<3>("h00"), state) @[Conditional.scala 37:30]
    when _T_67 : @[Conditional.scala 40:58]
      when valid : @[Cache.scala 109:20]
        when hit : @[Cache.scala 110:20]
          state <= UInt<3>("h05") @[Cache.scala 111:17]
          valid <= UInt<1>("h00") @[Cache.scala 112:17]
          jump2finish <= UInt<1>("h01") @[Cache.scala 113:23]
          skip @[Cache.scala 110:20]
        else : @[Cache.scala 114:44]
          node _T_68 = and(tag.valid, tag.dirty) @[Cache.scala 114:30]
          when _T_68 : @[Cache.scala 114:44]
            state <= UInt<3>("h01") @[Cache.scala 114:52]
            skip @[Cache.scala 114:44]
          else : @[Cache.scala 115:44]
            node _T_69 = eq(reqReg.wr, UInt<1>("h00")) @[Cache.scala 115:31]
            when _T_69 : @[Cache.scala 115:44]
              state <= UInt<3>("h03") @[Cache.scala 115:51]
              skip @[Cache.scala 115:44]
            else : @[Cache.scala 116:22]
              state <= UInt<3>("h05") @[Cache.scala 117:19]
              jump2finish <= UInt<1>("h01") @[Cache.scala 118:25]
              skip @[Cache.scala 116:22]
        skip @[Cache.scala 109:20]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_70 = eq(UInt<3>("h01"), state) @[Conditional.scala 37:30]
      when _T_70 : @[Conditional.scala 39:67]
        state <= UInt<3>("h02") @[Cache.scala 122:30]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_71 = eq(UInt<3>("h02"), state) @[Conditional.scala 37:30]
        when _T_71 : @[Conditional.scala 39:67]
          when io.memResp.valid : @[Cache.scala 123:50]
            state <= UInt<3>("h03") @[Cache.scala 123:57]
            skip @[Cache.scala 123:50]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_72 = eq(UInt<3>("h03"), state) @[Conditional.scala 37:30]
          when _T_72 : @[Conditional.scala 39:67]
            state <= UInt<3>("h04") @[Cache.scala 124:28]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_73 = eq(UInt<3>("h04"), state) @[Conditional.scala 37:30]
            when _T_73 : @[Conditional.scala 39:67]
              when io.memResp.valid : @[Cache.scala 126:32]
                state <= UInt<3>("h05") @[Cache.scala 127:15]
                skip @[Cache.scala 126:32]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_74 = eq(UInt<3>("h05"), state) @[Conditional.scala 37:30]
              when _T_74 : @[Conditional.scala 39:67]
                node _T_75 = and(io.cacheResp.ready, io.cacheResp.valid) @[Decoupled.scala 40:37]
                when _T_75 : @[Cache.scala 130:45]
                  state <= UInt<3>("h00") @[Cache.scala 131:13]
                  valid <= UInt<1>("h00") @[Cache.scala 132:13]
                  skip @[Cache.scala 130:45]
                skip @[Conditional.scala 39:67]
    node _T_76 = eq(state, UInt<3>("h01")) @[Cache.scala 136:28]
    node _T_77 = eq(state, UInt<3>("h03")) @[Cache.scala 136:53]
    node _T_78 = or(_T_76, _T_77) @[Cache.scala 136:44]
    io.memReq.valid <= _T_78 @[Cache.scala 136:19]
    node _T_79 = eq(state, UInt<3>("h04")) @[Cache.scala 137:29]
    node _T_80 = and(reqReg.wr, jump2finish) @[Cache.scala 137:59]
    node _T_81 = or(_T_79, _T_80) @[Cache.scala 137:45]
    cacheWrite.valid <= _T_81 @[Cache.scala 137:20]
    node _T_82 = eq(state, UInt<3>("h04")) @[Cache.scala 138:27]
    cacheWrite.sel <= _T_82 @[Cache.scala 138:18]
    node _T_83 = eq(state, UInt<3>("h05")) @[Cache.scala 139:31]
    io.cacheResp.valid <= _T_83 @[Cache.scala 139:22]
    node _T_84 = eq(state, UInt<3>("h04")) @[Cache.scala 140:47]
    wire _T_85 : UInt<32>[4] @[Cache.scala 141:34]
    wire _T_86 : UInt<128>
    _T_86 <= io.memResp.bits.data
    node _T_87 = bits(_T_86, 31, 0) @[Cache.scala 141:34]
    _T_85[0] <= _T_87 @[Cache.scala 141:34]
    node _T_88 = bits(_T_86, 63, 32) @[Cache.scala 141:34]
    _T_85[1] <= _T_88 @[Cache.scala 141:34]
    node _T_89 = bits(_T_86, 95, 64) @[Cache.scala 141:34]
    _T_85[2] <= _T_89 @[Cache.scala 141:34]
    node _T_90 = bits(_T_86, 127, 96) @[Cache.scala 141:34]
    _T_85[3] <= _T_90 @[Cache.scala 141:34]
    node _T_91 = mux(_T_84, _T_85[addrReg.word], data[addrReg.word]) @[Cache.scala 140:40]
    reg _T_92 : UInt, clock @[Cache.scala 140:36]
    _T_92 <= _T_91 @[Cache.scala 140:36]
    io.cacheResp.bits.data <= _T_92 @[Cache.scala 140:26]
    node _T_93 = eq(state, UInt<3>("h01")) @[Cache.scala 143:21]
    node _T_94 = eq(state, UInt<3>("h02")) @[Cache.scala 143:46]
    node _T_95 = or(_T_93, _T_94) @[Cache.scala 143:37]
    writeMem <= _T_95 @[Cache.scala 143:12]
    node _T_96 = eq(state, UInt<3>("h03")) @[Cache.scala 144:20]
    node _T_97 = eq(state, UInt<3>("h04")) @[Cache.scala 144:44]
    node _T_98 = or(_T_96, _T_97) @[Cache.scala 144:35]
    readMem <= _T_98 @[Cache.scala 144:11]
    when io.memResp.valid : @[Cache.scala 146:28]
      node _T_99 = bits(reset, 0, 0) @[Cache.scala 147:11]
      node _T_100 = eq(_T_99, UInt<1>("h00")) @[Cache.scala 147:11]
      when _T_100 : @[Cache.scala 147:11]
        printf(clock, UInt<1>(1), "get mem resp: addr: %x, data: %x\n", reqReg.addr, io.memResp.bits.data) @[Cache.scala 147:11]
        skip @[Cache.scala 147:11]
      skip @[Cache.scala 146:28]
    
